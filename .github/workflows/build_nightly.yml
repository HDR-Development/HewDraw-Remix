name: build_nightly
on: 
  push:
    branches:
      - dev

jobs:
  version_and_changelog:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    outputs: 
      version: ${{ steps.push_tag.outputs.version }}
      changelog: ${{ steps.github_changelog.outputs.changelog }}
    steps:
  
      # tag push
      - uses: jefflinse/pr-semver-bump@v1
        name: Bump and Tag Version
        id: push_tag
        with:
          mode: bump
          repo-token: ${{ secrets.GITHUB_TOKEN  }}
          minor-label: semver:feature
          patch-label: semver:patch
          with-v: true

      - name: checkout version
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0
  
      # github changelog
      - name: "Generate release changelog"
        id: github_changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          sinceTag: ${{ steps.push_tag.outputs.old-version }}
          stripHeaders: true
          verbose: false
          issuesWoLabels: false
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: CHANGELOG.md

  plugin_build:
    env:
      PLUGIN_NAME: hdr
    runs-on: ubuntu-latest
    needs: version_and_changelog
    container: 
      image: jugeeya/cargo-skyline:3.0.0-dkp-beta
    steps:
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    
    - name: checkout version
      uses: actions/checkout@v2

    # build the project
    - run: |
        export PATH=$PATH:/root/.cargo/bin:/opt/devkitpro/devkitA64/bin \
        && cd scripts && python3 make_dist.py build version=${{ needs.version_and_changelog.outputs.version }}-nightly name=hdr && cd ..
      env:
        HOME: /root

    ## mock upload files
    #- run: |
    #    mkdir distributions
    #    echo lol > distributions/hdr-switch.zip
    #    echo lol > distributions/hdr-ryujinx.zip

    - name: Upload version
      uses: actions/upload-artifact@v3
      with:
        name: version
        path: plugin/hdr_version.txt

    # upload asset
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        file: distributions/*
        prerelease: true
        file_glob: true
        asset_name: the_asset
        release_name: ${{ needs.version_and_changelog.outputs.version }}-nightly
        tag: ${{ needs.version_and_changelog.outputs.version }}
        overwrite: true
        body: ${{ needs.version_and_changelog.outputs.changelog }}
    
  ##############  handle the creasion of the full package installation  ##############
  full_package:
    runs-on: ubuntu-latest
    needs: [version_and_changelog, plugin_build]
    steps:
    - name: checkout version
      uses: actions/checkout@v2

    - id: romfs_version
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: HDR-Development/romfs-release

    - name: make package
      run: |
        python3 scripts/full_package.py ${{ needs.version_and_changelog.outputs.version }} ${{ steps.romfs_version.outputs.release }}

    # get the most recent latest full release
    - id: package_latest
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: HDR-Development/HDR-Nightlies

    # build the upgrade.zip and upgrade_deletions.txt
    - name: make upgrade artifacts
      run: |
        python3 scripts/make_diff.py nightly

    - name: show upgrade artifacts
      run: |
        ls && stat * && echo && ls upgrade_artifacts && stat upgrade_artifacts/*

    # upload the upgrade data to the previous release for auto updater
    - name: Upload upgrade data to previous release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: upgrade_artifacts/upgrade.zip
        prerelease: false
        file_glob: true
        asset_name: upgrade
        repo_name: HDR-Development/HDR-Nightlies
        tag: ${{ steps.package_latest.outputs.release }}
        overwrite: true


    - uses: actions/download-artifact@v3
      with:
        name: changelog
        
    - name: Display structure of downloaded changelog
      run: ls -R && cp CHANGELOG.md artifacts

    - uses: actions/download-artifact@v3
      with:
        name: version
        
    - name: Display structure of downloaded version
      run: ls -R && cp hdr_version.txt artifacts

    - name: Upload full package to nightlies
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: artifacts/*
        prerelease: false
        file_glob: true
        asset_name: artifacts
        repo_name: HDR-Development/HDR-Nightlies
        release_name: ${{ needs.version_and_changelog.outputs.version }}-nightly
        tag: ${{ needs.version_and_changelog.outputs.version }}
        overwrite: true
        body: ${{ needs.version_and_changelog.outputs.changelog }}

  ################  handle the creation of to-nightly.zip  ################
  to_nightly:
    runs-on: ubuntu-latest
    needs: [full_package, version_and_changelog]
    steps:
    - name: checkout version
      uses: actions/checkout@v2

    # get the nightly
    - id: latest_nightly
      uses: robinraju/release-downloader@v1.3
      with:
        repository: "HDR-Development/HDR-Nightlies"
        tag: ${{ needs.version_and_changelog.outputs.version }}
        fileName: "switch-package.zip"

    # move the nightly to the artifacts dir
    - run: mkdir artifacts && mv switch-package.zip artifacts

    # build the to-nightly.zip
    - name: make to-nightly.zip artifact
      run: |
        python3 scripts/make_diff.py beta

    - name: show upgrade artifacts
      run: |
        ls && stat * && echo && ls upgrade_artifacts && stat upgrade_artifacts/*

    - run: mv upgrade_artifacts/upgrade.zip to-nightly.zip

    # get the most recent latest beta
    - id: latest_beta
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: HDR-Development/HDR-Releases

    # upload the to-nightly.zip to the beta for the launcher
    - name: Upload to-nightly.zip to beta
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: to-nightly.zip
        prerelease: false
        file_glob: false
        asset_name: to-nightly.zip
        repo_name: HDR-Development/HDR-Releases
        tag: ${{ steps.latest_beta.outputs.release }}
        overwrite: true


  ################  handle the creation of to-beta.zip  ################
  to_beta:
    runs-on: ubuntu-latest
    needs: [full_package, version_and_changelog]
    steps:
    - name: checkout version
      uses: actions/checkout@v2

    # get the beta
    - id: latest_beta
      uses: robinraju/release-downloader@v1.3
      with:
        repository: "HDR-Development/HDR-Releases"
        latest: true
        fileName: "switch-package.zip"

    # move the beta to the artifacts dir
    - run: mkdir artifacts && mv switch-package.zip artifacts

    # build the to-beta.zip
    - name: make to-beta.zip artifact
      run: |
        python3 scripts/make_diff.py https://github.com/HDR-Development/HDR-Nightlies/releases/download/${{ needs.version_and_changelog.outputs.version }}/switch-package.zip

    - name: show upgrade artifacts
      run: |
        ls && stat * && echo && ls upgrade_artifacts && stat upgrade_artifacts/*

    - run: mv upgrade_artifacts/upgrade.zip to-beta.zip

    # upload the to-beta.zip to the beta for the launcher
    - name: Upload to-beta.zip to nightly
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: to-beta.zip
        prerelease: false
        file_glob: false
        asset_name: to-beta.zip
        repo_name: HDR-Development/HDR-Nightlies
        tag: ${{ needs.version_and_changelog.outputs.version }}
        overwrite: true