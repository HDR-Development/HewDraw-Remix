name: rust build

on:
  #push:
  #  branches: [ dev, stable ] # CHANGE "master" TO "main" IF THAT IS THE NAME OF YOUR MAIN BRANCH!
  #pull_request:
  #  branches: [ dev, stable ]
      
jobs:
  # build the plugin
  plugin_build:
    env:
      PLUGIN_NAME: hdr
    runs-on: ubuntu-latest
    container: 
      image: jugeeya/cargo-skyline:2.1.0-dkp
    outputs:
      version_string: ${{ steps.version.outputs.version_string }}
      commit_hash: ${{ steps.version.outputs.commit_hash }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      build_type: ${{ steps.get_release_type.outputs.release_type }}
      changelog: ${{ steps.github_changelog.outputs.changelog }}
    steps:
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    - name: Install git 
      run: |
        apt-get update
        apt-get install -y git
        git --version
        echo "Path is ... $PATH"
        PATH=$PATH:$(which git)
        echo "Path is ... $PATH"
    - name: checkout version
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0

    # collect what kind of build this is into the single outputs field
    - name: determine if release, beta, or nightly
      id: get_release_type
      if: github.event.workflow_run.event != 'pull_request'
      shell: bash
      run: >
        echo "##[set-output name=release_type;]$(python3 scripts/get_build_type.py ref:${{github.ref}} prbase:${{github.event.pull_request.base.ref}})"; 

    - name: output build type
      id: display_type
      run: >
        echo "${{ steps.get_release_type.outputs.release_type }}" 
    
    # if this is a nightly BUILD (aka, accepted PR to dev), OR a beta PR (a PR into stable) make changelog against stable
    - name: make nightly build or beta pr changes file
      id: nightly_changelog
      if: steps.get_release_type.outputs.release_type == 'nightly'
      shell: bash
      run: |
        cd scripts && python3 make_changelog.py stable origin && cd ..
    
    # if this is a new beta BUILD, make changelog against the last beta
    - name: make beta build changelog file
      id: beta_changelog
      if: steps.get_release_type.outputs.release_type == 'beta'
      shell: bash
      # do black magic to get the most recently tagged beta commit short hash, and then make the changelog file
      run: |
        cd scripts && export LAST_BETA=$(git rev-parse --short $(echo $(git for-each-ref --sort=-taggerdate --count=1 refs/tags/beta*) | head -n1 | awk '{print $1;}')) \
        && echo $LAST_BETA && python3 make_changelog.py $LAST_BETA local && cd ..

    # if this is a new release BUILD, make changelog against the last beta
    - name: make release build changelog file
      id: release_changelog
      if: steps.get_release_type.outputs.release_type == 'release'
      shell: bash
      # do black magic to get the most recently tagged beta commit short hash, and then make the changelog file
      run: |
        cd scripts && export LAST_RELEASE=$(git rev-parse --short $(echo $(git for-each-ref --sort=-taggerdate --count=1 refs/tags/release*) | head -n1 | awk '{print $1;}')) \
        && echo $LAST_RELEASE && python3 make_changelog.py $LAST_RELEASE local && cd ..

    - name: semantic version
      id: semantic-version
      shell: bash
      run: |
        echo "##[set-output name=version;]v$(python3 scripts/generate_version_string.py)"; 

    # make the version string
    - name: collect version string
      id: version
      shell: bash
      run: |
        echo "##[set-output name=version_string;]$(echo ${{ steps.semantic-version.outputs.version }}-${{ steps.get_release_type.outputs.release_type }})"
        echo "##[set-output name=commit_hash;]$(echo $(git rev-parse --short HEAD))"
        echo "generated semver text was: ${{ steps.semantic-version.outputs.version }}"
        echo $(git rev-parse --short HEAD)
        echo target ref: ${{ github.event.pull_request.base.ref }}
        echo head ref: ${{ github.ref }}
        ([[ "${{ steps.get_release_type.outputs.release_type }}" == "nightly" ]] && echo "##[set-output name=is_prerelease;]true") || echo "not nightly"
        ([[ "${{ steps.get_release_type.outputs.release_type }}" == "beta" ]] && echo "##[set-output name=is_prerelease;]false") || echo "not beta"

    - name: determine build argument
      id: build_arg
      shell: bash
      run: |
        ([[ "${{ github.event_name }}" == "pull_request" ]] && echo "##[set-output name=arg;]build") || echo "should be a push"
        ([[ "${{ github.event_name }}" == "push" ]] && echo "##[set-output name=arg;]publish") || echo "should be a pull request"
        
    - name: echo build argument
      id: echo_build
      run: |
        echo "build arg is: ${{ steps.build_arg.outputs.arg }}"

    # build the project
    - run: |
        export PATH=$PATH:/root/.cargo/bin:/opt/devkitpro/devkitA64/bin && export HDR_VERSION="${{ steps.version.outputs.version_string }}" \
        && cd scripts && python3 make_dist.py ${{ steps.build_arg.outputs.arg }} && cd ..
      env:
        HOME: /root

    ## mock upload files
    #- run: |
    #    mkdir distributions
    #    echo lol > distributions/hdr-switch.zip
    #    echo lol > distributions/hdr-ryujinx.zip
    #    echo lol > change_summary.txt

    - name: Upload hdr-switch artifact
      uses: actions/upload-artifact@v2
      with:
        name: hdr-switch
        path: distributions/hdr-switch.zip
    - name: Upload hdr-ryujinx artifact
      uses: actions/upload-artifact@v2
      with:
        name: hdr-ryujinx
        path: distributions/hdr-ryujinx.zip
    - name: Upload change_summary.txt
      uses: actions/upload-artifact@v2
      with:
        name: change_summary
        path: scripts/change_summary.txt
        if-no-files-found: ignore # 'error', 'warn', or 'ignore' are available, defaults to `warn`
   
    # build regex exclusion for tags
    - name: build changelog tag regex
      id: tag_regex
      shell: bash
      run: |
        ([[ "${{ steps.get_release_type.outputs.release_type }}" == "nightly" ]] && echo "##[set-output name=regex;]beta") || echo "lol"
        ([[ "${{ steps.get_release_type.outputs.release_type }}" == "beta" ]] && echo "##[set-output name=regex;]nightly") || echo "lol"

    - name: display regex
      id: show_regex
      run: |
        echo "${{ steps.tag_regex.outputs.regex }}"

    # github changelog
    - name: "Generate release changelog"
      id: github_changelog
      uses: heinrichreimer/github-changelog-generator-action@v2.3
      with:
        onlyLastTag: true
        excludeTagsRegex: '/${{ steps.tag_regex.outputs.regex }}/'
        token: ${{ secrets.RELEASE_TOKEN }} 
    - name: view changelog
      id: output_changelog
      run: |
        echo "${{steps.github_changelog.outputs.changelog}}"


  # upload a build
  upload_build:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/dev') && github.event.workflow_run.event != 'pull_request'
    needs:
      - plugin_build
    steps:
    # print the outputs from the build job
    - run: |
        echo "Version string: ${{ needs.plugin_build.outputs.version_string }}"
        echo "Commit hash: ${{ needs.plugin_build.outputs.commit_hash }}"
        echo "Build type: ${{ needs.plugin_build.outputs.build_type }}"
        echo "Is prerelease: ${{ needs.plugin_build.outputs.is_prerelease }}"

    #- name: delete old builds
    #  uses: dev-drprasad/delete-older-releases@v0.2.0
    #  with:
    #    keep_latest: 0
    #    delete_tags: true
    #    delete_tag_pattern: ${{ needs.plugin_build.outputs.build_type }} # defaults to ""
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download all artifacts
      uses: actions/download-artifact@v2
    - name: Update Build
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: ${{ needs.plugin_build.outputs.is_prerelease }}
        allow_override: true
        gzip: false
        tag: ${{ needs.plugin_build.outputs.version_string }}
        name: ${{ needs.plugin_build.outputs.version_string }}
        body: '${{needs.plugin_build.outputs.changelog}}'
        files: >
          hdr-switch/*
          hdr-ryujinx/*
          change_summary/*
