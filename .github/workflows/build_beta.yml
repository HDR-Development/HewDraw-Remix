name: make beta

on:
  workflow_dispatch:
    inputs:
      romfs_version:
        type: string
        description: 'The romfs version tag to use'
        required: true
        default: 'latest'

jobs:
  version_and_changelog:
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags')
    env:
      GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    outputs: 
      changelog: ${{ steps.github_changelog.outputs.changelog }}
    steps:

    - name: echo ref
      run: echo "ref is ${{ github.ref }}"

    - name: get_last_beta
      id: get_last_beta
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        releaseNameRegEx: beta
        searchLimit: 250

    - id: echo_release_info
      shell: bash
      run: |
        echo ${{ steps.get_last_beta.outputs.tag_name }}

    
    - name: checkout version
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0

    # github changelog
    - name: "Generate release changelog"
      id: github_changelog
      uses: heinrichreimer/github-changelog-generator-action@v2.3
      with:
        sinceTag: ${{ steps.get_last_beta.outputs.tag_name }}
        token: ${{ secrets.GITHUB_TOKEN  }}
        stripHeaders: true
        verbose: false
        issuesWoLabels: false
        maxIssues: 500
        stripGeneratorNotice: true
        compareLink: false
        simpleList: true

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: CHANGELOG.md

  plugin_build:
    env:
      PLUGIN_NAME: hdr
    runs-on: ubuntu-20.04
    needs: version_and_changelog
    container: 
      image: hewdrawremix/hewdraw-builder:latest
    outputs: 
      trimmed_tag: ${{ steps.trimmed_tag.outputs.tag }}
    steps:
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    
    - id: trimmed_tag
      shell: bash
      run: |
        export UNTRIMMED=${{github.ref}}
        export TRIMMED=${UNTRIMMED#"refs/tags/"}
        echo "untrimmed: $UNTRIMMED"
        echo "trimmed: $TRIMMED"
        echo "##[set-output name=tag;]$TRIMMED";

    - name: checkout version
      uses: actions/checkout@v2

    # build the project
    - run: |
        cd scripts && NO_RUST_NIGHTLY=1 python3 make_dist.py build version=${{ steps.trimmed_tag.outputs.tag }}-beta name=hdr && cd ..
      env:
        HOME: /root

    ## mock upload files
    #- run: |
    #    mkdir distributions
    #    echo lol > distributions/hdr-switch.zip
    #    echo lol > distributions/hdr-ryujinx.zip

    - name: Upload version
      uses: actions/upload-artifact@v3
      with:
        name: version
        path: hdr_version.txt

    - uses: dev-drprasad/delete-tag-and-release@master
      with:
        delete_release: true # default: false
        tag_name: ${{ steps.trimmed_tag.outputs.tag }} # tag name to delete
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # upload asset
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: distributions/*
        prerelease: false
        file_glob: true
        asset_name: the_asset
        release_name: ${{ steps.trimmed_tag.outputs.tag }}-beta
        tag: ${{ steps.trimmed_tag.outputs.tag }}
        overwrite: true
        body: ${{ needs.version_and_changelog.outputs.changelog }}

  full_package:
    runs-on: ubuntu-20.04
    needs: [version_and_changelog, plugin_build]
    steps:
    - name: checkout version
      uses: actions/checkout@v2

    - id: romfs_latest
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: HDR-Development/romfs-release

    # validate that the chosen release exists
    - name: get the specified release
      uses: cardinalby/git-get-release-action@v1
      if: ${{ contains(github.event.inputs.romfs_version, 'latest') != true }}
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag: ${{ github.event.inputs.romfs_version }}   
        repo: 'HDR-Development/romfs-release'

    # make package depending on version chosen
    - name: make package with chosen version
      if: ${{ contains(github.event.inputs.romfs_version, 'latest') != true }}
      run: |
        python3 scripts/full_package.py ${{ needs.plugin_build.outputs.trimmed_tag }} ${{ github.event.inputs.romfs_version }} 

    - name: make package with latest
      if: ${{ contains(github.event.inputs.romfs_version, 'latest') }}
      run: |
        python3 scripts/full_package.py ${{ needs.plugin_build.outputs.trimmed_tag }} ${{ steps.romfs_latest.outputs.release }}

    # get the most recent latest full release
    - id: package_latest
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: HDR-Development/HDR-Releases

    # build the upgrade.zip and deletions.json
    - name: make upgrade artifacts
      run: |
        python3 scripts/make_diff.py beta

    - name: show upgrade artifacts
      run: |
        ls && stat * && echo && ls upgrade_artifacts && stat upgrade_artifacts/*

    # upload the upgrade data to the previous release for auto updater
    - name: Upload upgrade data to previous release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: upgrade_artifacts/upgrade.zip
        prerelease: false
        file_glob: true
        asset_name: upgrade
        repo_name: HDR-Development/HDR-Releases
        tag: ${{ steps.package_latest.outputs.release }}
        overwrite: true

    # upload the upgrade data to the previous release for auto updater
    - name: Upload upgrade deletions to previous release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: upgrade_artifacts/deletions.json
        prerelease: false
        file_glob: true
        asset_name: deletions
        repo_name: HDR-Development/HDR-Releases
        tag: ${{ steps.package_latest.outputs.release }}
        overwrite: true

    - uses: actions/download-artifact@v3
      with:
        name: changelog
        
    - name: Display structure of downloaded changelog
      run: ls -R && cp CHANGELOG.md artifacts

    - uses: actions/download-artifact@v3
      with:
        name: version
        
    # build the lvd files
    # - id: lvd_files
    #  uses: robinraju/release-downloader@v1.7
    #  with:
    #    repository: "techyCoder81/SSBU-LVD-data-dump"
    #    tag: release
    #    fileName: "lvd_dumper.zip"

    # - name: Setup dotnet
    #  uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: '5.0.408'

    #- name: extract lvd data
    #  id: lvd_extract
    #  shell: bash
    #  run: |
    #    . scripts/extract_lvd_data.sh

    - name: Display structure of downloaded version
      run: ls -R && cp hdr_version.txt artifacts

    #- name: Push lvd file to Suddy's HDRStageTool
    #  uses: dmnemec/copy_file_to_another_repo_action@main
    #  env:
    #    API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB_HDRSTAGETOOL }}
    #  with:
    #    source_file: 'artifacts/lvd.zip'
    #    destination_folder: 'beta'
    #    destination_repo: 'SuddyN/HDRStageTool'
    #    user_email: 'suddy121800@hotmail.com'
    #    user_name: 'SuddyN'
    #    destination_branch: 'gh-pages'

    - name: Upload full package to betas
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: artifacts/*
        prerelease: false
        file_glob: true
        asset_name: artifacts
        repo_name: HDR-Development/HDR-Releases
        release_name: HDR Update ${{ needs.plugin_build.outputs.trimmed_tag }}-beta
        tag: ${{ needs.plugin_build.outputs.trimmed_tag }}
        overwrite: true
        body: ${{ needs.version_and_changelog.outputs.changelog }}

  ################  handle the creation of to-nightly.zip  ################
  to_nightly:
    runs-on: ubuntu-20.04
    needs: [full_package, version_and_changelog]
    steps:
    - name: checkout version
      uses: actions/checkout@v2

    # download the nightly
    - id: latest_nightly
      uses: robinraju/release-downloader@v1.7
      with:
        repository: "HDR-Development/HDR-Nightlies"
        latest: true
        fileName: "switch-package.zip"

    # move the nightly to the artifacts dir
    - run: mkdir artifacts && mv switch-package.zip artifacts

    # build the to-nightly.zip
    - name: make to-nightly.zip artifact
      run: |
        python3 scripts/make_diff.py beta

    - name: show upgrade artifacts
      run: |
        ls && stat * && echo && ls upgrade_artifacts && stat upgrade_artifacts/*

    - run: mv upgrade_artifacts/upgrade.zip to-nightly.zip

    - run: mv upgrade_artifacts/deletions.json to_nightly_deletions.json

    # get the most recent latest beta
    - id: latest_beta
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: HDR-Development/HDR-Releases

    # upload the to-nightly.zip to the beta for the launcher
    - name: Upload to-nightly.zip to beta
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: to-nightly.zip
        prerelease: false
        file_glob: false
        asset_name: to-nightly.zip
        repo_name: HDR-Development/HDR-Releases
        tag: ${{ steps.latest_beta.outputs.release }}
        overwrite: true

    # upload the to_nightly_deletions.json to the beta for the launcher
    - name: Upload to_nightly_deletions.json to beta
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.RELEASE_TOKEN }}
        file: to_nightly_deletions.json
        prerelease: false
        file_glob: false
        asset_name: to_nightly_deletions.json
        repo_name: HDR-Development/HDR-Releases
        tag: ${{ steps.latest_beta.outputs.release }}
        overwrite: true
